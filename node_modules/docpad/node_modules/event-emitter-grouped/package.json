{
  "name": "event-emitter-grouped",
  "version": "2.3.0",
  "description": "Emit events in serial or parallel with support for synchronous and asynchronous listeners",
  "homepage": "https://github.com/bevry/event-emitter-grouped",
  "keywords": [
    "event",
    "events",
    "emitter",
    "eventemitter",
    "async",
    "sync",
    "parallel",
    "serial",
    "flow",
    "completion",
    "callback"
  ],
  "author": {
    "name": "Bevry Pty Ltd",
    "email": "us@bevry.me",
    "url": "http://bevry.me"
  },
  "maintainers": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    }
  ],
  "contributors": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    }
  ],
  "bugs": {
    "url": "https://github.com/bevry/event-emitter-grouped/issues"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/bevry/event-emitter-grouped.git"
  },
  "engines": {
    "node": ">=0.4"
  },
  "dependencies": {
    "ambi": "~2.0.0",
    "taskgroup": "~3.1.2"
  },
  "devDependencies": {
    "coffee-script": "~1.6.2",
    "joe": "~1.2.0",
    "joe-reporter-console": "~1.2.1",
    "chai": "~1.7.0"
  },
  "directories": {
    "lib": "./out/lib"
  },
  "scripts": {
    "test": "node ./out/test/event-emitter-grouped-test.js"
  },
  "main": "./out/lib/event-emitter-grouped.js",
  "readme": "# Event Emitter Grouped\n\n[![Build Status](https://secure.travis-ci.org/bevry/event-emitter-grouped.png?branch=master)](http://travis-ci.org/bevry/event-emitter-grouped \"Check this project's build status on TravisCI\")\n[![NPM version](https://badge.fury.io/js/event-emitter-grouped.png)](https://npmjs.org/package/event-emitter-grouped \"View this project on NPM\")\n[![Gittip donate button](http://badgr.co/gittip/bevry.png)](https://www.gittip.com/bevry/ \"Donate weekly to this project using Gittip\")\n[![Flattr donate button](https://raw.github.com/balupton/flattr-buttons/master/badge-89x18.gif)](http://flattr.com/thing/344188/balupton-on-Flattr \"Donate monthly to this project using Flattr\")\n[![PayPayl donate button](https://www.paypalobjects.com/en_AU/i/btn/btn_donate_SM.gif)](https://www.paypal.com/au/cgi-bin/webscr?cmd=_flow&SESSION=IHj3DG3oy_N9A9ZDIUnPksOi59v0i-EWDTunfmDrmU38Tuohg_xQTx0xcjq&dispatch=5885d80a13c0db1f8e263663d3faee8d14f86393d55a810282b64afed84968ec \"Donate once-off to this project using Paypal\")\n\nEmit events in serial or parallel with support for synchronous and asynchronous listeners\n\n\n\n## Install\n\n1. [Install Node.js](http://bevry.me/node/install)\n2. `npm install --save event-emitter-grouped`\n\n\n\n## Usage\n\n``` javascript\n// Importer\nvar EventEmitterGrouped = require('event-emitter-grouped').EventEmitterGrouped;\n\n// Instantiate a new instance\nvar emitter = new EventEmitterGrouped();\n\n// Bind an asynchronous event\nemitter.on('hello', function(next){\n\tconsole.log('\\tasync started');\n\tsetTimeout(function(){\n\t\tconsole.log('\\tasync finished');\n\t\tnext();\n\t}, 1000);\n});\n\n// Bind a synchronous event\nemitter.on('hello', function(){\n\tconsole.log('\\tsync started and finished');\n});\n\n// Bind a prioritized event\nvipListener = function(){\n\tconsole.log('\\tvip started and finished');\n};\nvipListener.priority = 1;\nemitter.on('hello', vipListener);\n\n// Emit the events in serial (one after the other in a waiting fashion)\nconsole.log('hello in serial started');\nemitter.emitSerial('hello', function(err){\n\tconsole.log('hello in serial finished');\n\n\t// Emit the events in parallel (all at once)\n\tconsole.log('hello in parallel started');\n\temitter.emitParallel('hello', function(err){\n\t\tconsole.log('hello in parallel finished');\n\t});\n});\n\n/* Outputs:\nhello in serial started\n\tvip started and finished\n\tasync started\n\tasync finished\n\tsync started and finished\nhello in serial finished\nhello in parallel started\n\tvip started and finished\n\tasync started\n\tsync started and finished\n\tasync finished\nhello in parallel finished\n*/\n```\n\n\n### EventEmitterGrouped, extends [events.EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter)\n\n- `getListenerGroup(eventName, args..., next?)` - returns a [TaskGroup](https://github.com/bevry/taskgroup#files) where each listener is a task, ordered by the highest priority listeners first\n\t- `eventName` is the event that we should get the listeners for\n\t- `args...` is an optional set of arguments that should be passed to the listeners when they are executed\n\t- `next` is an optional completion callback that will fire once all the tasks/listeners have compeleted\n- `off` - alias for [events.EventEmitter.prototype.removeListener](http://nodejs.org/api/events.html#events_emitter_removelistener_event_listener)\n- `emitSerial(eventName, args..., next?)` - fetch the listener group and execute it in serial\n- `emitParallel(eventName, args..., next?)` - fetch the listener group and execute it in parallel\n\n\n\n## History\n[You can discover the history inside the `History.md` file](https://github.com/bevry/event-emitter-grouped/blob/master/History.md#files)\n\n\n\n## License\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT License](http://creativecommons.org/licenses/MIT/)\n<br/>Copyright © 2013+ [Bevry Pty Ltd](http://bevry.me)\n<br/>Copyright © 2011-2012 [Benjamin Arthur Lupton](http://balupton.com)\n",
  "readmeFilename": "README.md",
  "_id": "event-emitter-grouped@2.3.0",
  "_from": "event-emitter-grouped@~2.3.0"
}
