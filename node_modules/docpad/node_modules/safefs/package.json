{
  "name": "safefs",
  "version": "3.0.3",
  "description": "Stop getting EMFILE errors! Open only as many files as the operating system supports.",
  "homepage": "https://github.com/bevry/safefs",
  "keywords": [
    "fs",
    "path",
    "openFile",
    "closeFile",
    "emfile"
  ],
  "author": {
    "name": "Bevry Pty Ltd",
    "email": "us@bevry.me",
    "url": "http://bevry.me"
  },
  "maintainers": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    }
  ],
  "contributors": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    }
  ],
  "bugs": {
    "url": "https://github.com/bevry/safefs/issues"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/bevry/safefs.git"
  },
  "engines": {
    "node": ">=0.4"
  },
  "dependencies": {
    "taskgroup": "~3.2.0"
  },
  "devDependencies": {
    "coffee-script": "~1.6.2",
    "joe": "~1.3.0",
    "joe-reporter-console": "~1.2.1",
    "chai": "~1.7.2"
  },
  "directories": {
    "lib": "./out/lib"
  },
  "scripts": {
    "test": "node ./out/test/safefs-test.js"
  },
  "main": "./out/lib/safefs.js",
  "readme": "# Safe FS\n\n[![Build Status](https://secure.travis-ci.org/bevry/safefs.png?branch=master)](http://travis-ci.org/bevry/safefs \"Check this project's build status on TravisCI\")\n[![NPM version](https://badge.fury.io/js/safefs.png)](https://npmjs.org/package/safefs \"View this project on NPM\")\n[![Gittip donate button](http://badgr.co/gittip/bevry.png)](https://www.gittip.com/bevry/ \"Donate weekly to this project using Gittip\")\n[![Flattr donate button](https://raw.github.com/balupton/flattr-buttons/master/badge-89x18.gif)](http://flattr.com/thing/344188/balupton-on-Flattr \"Donate monthly to this project using Flattr\")\n[![PayPayl donate button](https://www.paypalobjects.com/en_AU/i/btn/btn_donate_SM.gif)](https://www.paypal.com/au/cgi-bin/webscr?cmd=_flow&SESSION=IHj3DG3oy_N9A9ZDIUnPksOi59v0i-EWDTunfmDrmU38Tuohg_xQTx0xcjq&dispatch=5885d80a13c0db1f8e263663d3faee8d14f86393d55a810282b64afed84968ec \"Donate once-off to this project using Paypal\")\n\nStop getting EMFILE errors! Open only as many files as the operating system supports.\n\n\n\n## Install\n\n1. [Install Node.js](http://bevry.me/node/install)\n2. `npm install --save safefs`\n\n\n\n## Usage\n\n``` javascript\nvar safefs = require('safefs');\n```\n\nThe following [file system](http://nodejs.org/docs/latest/api/all.html#all_file_system) methods are available (but wrapped in safe way to prevent EMFILE errors):\n\n- `readFile(path, options?, next)`\n- `writeFile(path, data, options?, next)` - will also attempt to ensure the path exists\n- `appendFile(path, data, options?, next)` - will also attempt to ensure the path exists\n- `mkdir(path, mode?, next)` - mode defaults to `0o777 & (~process.umask())`\n- `stat(path, next)`\n- `readdir(path, next)`\n- `unlink(path, next)`\n- `rmdir(path, next)`\n- `exists(path, next)`\n\nFor other file system interaction, you can do the following:\n\n``` javascript\n// get a slot in the file system queue\nrequire('safefs').openFile(function(closeFile){\n\t// do our file system interaction\n\trequire('fs').someOtherMethod(a,b,c,function(err,a,b,c){\n\t\t// close the slot we are using in the file system queue\n\t\tcloseFile();\n\t});\n});\n```\n\nTo make this possible we define a global variable called `safefsGlobal` that manages the available slots for interacting with the file system.\n\n\n\n## History\nYou can discover the history inside the [History.md](https://github.com/bevry/safefs/blob/master/History.md#files) file\n\n\n\n## License\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT License](http://creativecommons.org/licenses/MIT/)\n<br/>Copyright © 2013+ [Bevry Pty Ltd](http://bevry.me)\n<br/>Copyright © 2011-2012 [Benjamin Arthur Lupton](http://balupton.com)\n",
  "readmeFilename": "README.md",
  "_id": "safefs@3.0.3",
  "_from": "safefs@~3.0.3"
}
